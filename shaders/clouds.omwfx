uniform_float sampling_quality {
    default = 0.0;
    min = 0.0;
    max = 10.0;
    step = 0.1;
    description = "The sampling quality of cloud raymarching";
}

uniform_float scattering_factor {
    default = 1.0;
    min = 0.0;
    max = 5.0;
    step = 0.1;
    description = "Extent of sky scattering (that tints distant objects toward the colour of the sky)";
}

uniform_bool clouds_enabled {
    default = true;
    description = "Enable high-altitude clouds";
}

uniform_bool dynamic_clouds {
    default = true;
    description = "Enable weather-dependent cloud cover";
}

uniform_float cloud_density {
    default = 0.5;
    min = 0.0;
    max = 1.0;
    step = 0.05;
    description = "Density of clouds";
}

uniform_float cloud_height {
    default = 75000.0;
    min = 20000.0;
    max = 100000.0;
    step = 1000;
    description = "Height of clouds above the water level";
}

uniform_float cloud_depth {
    default = 120000.0;
    min = 50000.0;
    max = 1000000.0;
    step = 10000;
    description = "The depth of the cloud column";
}

uniform_int cloud_detail {
    default = 1;
    min = 0;
    max = 2;
    step = 1;
    description = "The amount of detail added to clouds";
}

uniform_bool mist_enabled {
    default = true;
    description = "Enable low-altitude mist";
}

uniform_bool dynamic_mist {
    default = true;
    description = "Enable weather-dependent mist";
}

uniform_float mist_density {
    default = 0.5;
    min = 0.0;
    max = 1.0;
    step = 0.05;
    description = "Density of mist";
}

uniform_float mist_height {
    default = 1250.0;
    min = 0.0;
    max = 3000.0;
    step = 250;
    description = "Base height of mist around the water level";
}

uniform_float mist_speed {
    default = 1;
    min = 0.0;
    max = 5.0;
    step = 0.1;
    description = "The speed that mist moves through the world";
}

uniform_float mist_detail {
    default = 0.5;
    min = 0.0;
    max = 1.5;
    step = 0.1;
    description = "Detailing visible in mist. If you experience rippling, turn this down";
}

uniform_bool mist_swirling {
    default = false;
    description = "An additional swirling effect to mist";
}

uniform_bool replace_skybox {
    default = true;
    description = "Override the default skybox";
}

uniform_bool better_sun {
    default = true;
    description = "Enable better sun rendering";
}

uniform_float point_glow_strength {
    default = 0.25;
    min = 0.0;
    max = 1.0;
    step = 0.05;
    description = "Strength of glow around point lights";
}

uniform_float point_glow_min_fade_dist {
    default = 50.0;
    min = 0.0;
    max = 1024.0;
    step = 1.0;
    description = "Minimum distance from the camera that the point light glow starts to fade in";
}

uniform_float point_glow_max_fade_dist {
    default = 100.0;
    min = 0.0;
    max = 1024.0;
    step = 1.0;
    description = "Distance from the camera that the point light glow fully fades in";
}

uniform_float point_glow_fade {
    default = 0.0;
    min = 0.0;
    max = 1.0;
    step = 0.05;
    description = "How much point lights fade out when they are too close. Use this to fade out torches/lamps that the player is holding.";
}

uniform_bool point_glow_diffusion {
    default = true;
    description = "Whether mist and clouds should influence point glow (may be expensive)";
}

uniform_float point_glow_min {
    default = 25.0;
    min = 0.0;
    max = 50.0;
    step = 1.0;
    description = "The minimum distance at which point glow has its maximum value";
}

uniform_float point_glow_falloff {
    default = 1.4;
    min = 0.5;
    max = 2.0;
    step = 0.025;
    description = "The exponent used to control point glow falloff";
}

uniform_bool clamp_point_glow {
    default = true;
    description = "Whether point glow is clamped to the radius of the light (may reduce artifacts)";
}

uniform_bool dithering_enabled {
    default = false;
    description = "Whether dithering is enabled, reducing color banding";
}

uniform_bool debug {
    default = false;
    description = "Whether to enable debugging mode";
}

sampler_2d noise {
    source = "textures/noise2.png";
    mag_filter = linear;
    min_filter = linear;
    wrap_s = repeat;
    wrap_t = repeat;
    source_format = red;
    internal_format = red;
    source_type = unsigned_byte;
}

fragment main {

	//Array of cloud densities per weather ID
	float cloud_transition[10]=float[](
		float(0.2),  //Clear
		float(0.35), //Cloudy
		float(0.25),  //Foggy
		float(0.4),  //Overcast
		float(0.5),  //Rain
		float(0.6),  //Thunder
		float(0.7),  //Ash
		float(0.7),  //Blight
		float(0.5),  //Snow
		float(0.6)   //Blizzard
	);

	//Array of mist densities per weather ID
	float mist_transition[10]=float[](
		float(0.1),  //Clear
		float(0.25),  //Cloudy
		float(0.75),  //Foggy
		float(0.35),  //Overcast
		float(0.4),  //Rain
		float(0.4),  //Thunder
		float(0.3),  //Ash
		float(0.2),  //Blight
		float(0.3),  //Snow
		float(0.4)   //Blizzard
	);

    omw_In vec2 omw_TexCoord;

    #define HORIZON 100000000

    float dist_at(vec2 uv) {
        float depth = omw_GetDepth(uv);
        mat4 inv = omw.invViewMatrix * omw.invProjectionMatrix;
        vec4 clip_space = vec4((uv * 2.0 - 1.0) * vec2(1, 1), 1 - depth, 1.0);
        vec4 view_space = inv * clip_space;
        return view_space.z / view_space.w;
    }

    vec3 wpos_at(vec2 uv) {
        float depth = omw_GetDepth(uv);
        #if (OMW_REVERSE_Z == 1)
            float flipped_depth = 1.0 - depth;
        #else
            float flipped_depth = depth * 2.0 - 1.0;
        #endif
        vec4 clip_space = vec4(uv * 2.0 - 1.0, flipped_depth, 1.0);
        if (depth == 1) {
            vec4 world_space = omw.invViewMatrix * ((omw.invProjectionMatrix * clip_space) * vec4(1, 1, 1, 0));
            return normalize(world_space.xyz) * HORIZON;
        } else {
            vec4 world_space = omw.invViewMatrix * (omw.invProjectionMatrix * clip_space);
            return world_space.xyz / world_space.w;
        }
    }

    #define M1 204766743
    #define M2 388370683
    #define M3 396128171

    // Replace this function with the one below it if your GPU can't handle bitwise ops
    float hash_one(int q) {
        int n = ((M3 * q) ^ M2) * M1;
        return float(n) * (1.0 / float(0xffffffffU));
    }

    float noise_2d(vec2 pos) {
        return omw_Texture2D(noise, pos).x;
    }

    float noise_3d(vec3 pos) {
        pos.z *= 15.0;
        int z = int(floor(pos.z));
        vec2 offs0 = vec2(hash_one(z), hash_one(z + 73));
        vec2 offs1 = vec2(hash_one(z + 1), hash_one(z + 1 + 73));
        return mix(
            noise_2d(pos.xy + offs0),
            noise_2d(pos.xy + offs1),
            fract(pos.z)
        );
    }

    vec2 fog_at(vec3 wpos, float dist, vec3 dir, in float dyn_clouds, in float dyn_mist) {
        wpos.z = max(wpos.z, 0);
        vec3 time = vec3(omw.simulationTime * 0.1, 0, 0);
        float mist = 0.0;
        if (mist_enabled) {
            float mist_base = omw.waterHeight
                + mist_height
                + (noise_2d(wpos.xy * 0.000003 + time.xy * 0.03) - 0.6) * 6000;
            const float mist_min_height = 4500.0;
            const float mist_max_fade = 500.0;

            if (abs(wpos.z - mist_base) < mist_min_height + mist_max_fade) {
                if (mist_swirling) {
                    wpos.xy += vec2(
                        noise_2d(wpos.xy * 0.0005) - 0.5,
                        noise_2d(wpos.xy * 0.0005) - 0.5
                    ) * 250;
                }

                float mist_nz = mist_density * dyn_mist * (0.01
                    * ((noise_3d((wpos - time * 2000 * mist_speed) / 3000) - 0.5) * 0.35 + 0.5) * 0.8
                    * (0.5 - abs(noise_3d((wpos + time * 3000 * mist_speed) / 2000) - 0.5) * 0.35 * mist_detail) * 0.4
                );
                float mist_height = mist_min_height + mist_max_fade * dyn_mist; // Causes rising mist

                mist = max(mist_nz, 0.0) * pow(clamp(1.0 - (wpos.z - mist_base) / mist_height, 0, 1), 5);
            }
        }

        float cloud = 0.0;
        float sun_access = 1.0;

        float cloud_base = omw.waterHeight + cloud_height;
        if (clouds_enabled && abs(wpos.z - cloud_base) < cloud_depth) {
            float small_nz = 0.0;
            if (cloud_detail >= 1) { small_nz += noise_3d((wpos - time * 5000.0) / 120000.0) - 0.5; }
            if (cloud_detail >= 2) { small_nz += (noise_3d((wpos - time * 3000.0) / 30000.0) - 0.5) * 0.25; }

            float cloud_factor = max(
                pow(max(
                    (noise_3d((wpos * vec3(0.5, 0.5, 1) + time * 15000.0) / 600000.0) - 1.0 + dyn_clouds)
                    + small_nz * 0.1
                    + abs(small_nz) * 0.1
                , 0.0) * 3.0, 5.0)
            , 0.0);
            sun_access = clamp(
                2.0 + (wpos.z - cloud_base) / cloud_depth * 0.25
                - dyn_clouds * 0.1
                - dir.z * 0.1
                - abs(small_nz) * pow(dyn_clouds, 2) * 0.35
                - pow(cloud_factor, 0.03) * 1.25
            , 0.25, 1.0);
            cloud = cloud_factor
                * 0.01
                * pow(max(1.0 - abs(wpos.z - cloud_base) / cloud_depth, 0), 8);
        }

        float attenuation = 0.00009 / (1.0 + wpos.z / 300);

        return vec2(
            mist + cloud,// + attenuation,
            sun_access
        );
    }

    vec3 sun_color = mix(
        vec3(2, 0.5, 0.2) * 3,
        vec3(0.6, 0.5, 0.0),
        pow(max(omw.sunPos.z + 0.2, 0), 0.1)
    );

	vec3 weather_tone[10]=vec3[](
		vec3(0.85),  //Clear
		vec3(0.7), //Cloudy
		vec3(0.65),  //Foggy
		vec3(0.6),  //Overcast
		vec3(0.55),  //Rain
		vec3(0.5, 0.5, 0.6),  //Thunder
		vec3(1.0, 0.5, 0.25),  //Ash
		vec3(1.0, 0.5, 0.5),  //Blight
		vec3(1.0),   //Snow
		vec3(1.0)   //Blizzard
	);

    vec3 sky_tone = mix(weather_tone[omw.weatherID], weather_tone[omw.nextWeatherID], omw.weatherTransition);

    vec3 sky_color = mix(
        mix(
            vec3(1.2, 0.4, 0.2),
            vec3(0.01, 0.05, 0.1),
            pow(max(-omw.sunPos.z + 0.2, 0), 0.2)
        ),
        vec3(0.6, 0.8, 1),
        pow(max(omw.sunPos.z, 0), 0.5)
    ) * sky_tone;

    float sampling_factor = pow(1.25, sampling_quality);
    float lspace(float wspace) { return log(wspace) * sampling_factor; }
    float wspace(float lspace) { return exp(lspace / sampling_factor); }

    vec4 apply_fog(vec4 col, vec3 wpos, vec3 dir, float max_dist, in float dyn_clouds, in float dyn_mist) {
        float sun_light = pow(max(omw.sunPos.z, 0), 0.25) * 1.3;
        float moon_light = max(-omw.sunPos.z + 0.5, 0.0) * 0.3;
        float direct_light = pow(max(dot(dir, normalize(omw.sunPos.xyz)), 0), 50) * pow(clamp(omw.sunPos.z * 10.0, 0, 1), 0.5);
        vec3 fog_color = (sun_light + moon_light) * mix(sky_color, sky_tone, max(omw.sunPos.z, 0.3));

        vec3 fog_light = fog_color + direct_light * sun_color;

        //float step_factor = 1.0 / mix(0.75, 1, samples) * 0.3;

        float dist = max_dist;
        //float f = log(dist) / step_factor + 1;

        // Initial
        //vec2 ifog = fog_at(omw.eyePos.xyz + dir * max_dist, max_dist, dir, dyn_clouds, dyn_mist) * vec2(0.1, 1.0);
        //ifog.x *= pow(abs(dir.z) + 0.3, 2) * 0.75;
        //col.rgb = mix(fog_light * ifog.y, col.rgb, pow(0.9999, abs(exp(floor(f) * step_factor) * 20.0 - max_dist) * ifog.x * 10000));

        if (debug) {
            if (fract(lspace(dist)) < 0.03) {
                col.rgb = vec3(1, 0, 0);
            }
        }

        int i = 0;
        float f = floor(lspace(dist));

        vec3 ispos = omw.eyePos.xyz + dir * dist;
        vec2 ifog = fog_at(ispos, dist, dir, dyn_clouds, dyn_mist);
        ifog *= 1.0 - abs(fract(lspace(dist)) - 0.5) * 2;
        ifog *= max(abs(dir.z), 0.35);
        col.rgb = mix(fog_light * ifog.y, col.rgb, pow(0.9999, abs(dist - wspace(f)) * ifog.x * 10000 * 0.5));

        while (f > lspace(1000.0) && i++ < 100) {
            float new_dist = wspace(f);//min(exp(f * step_factor) * 20.0, max_dist);

            vec3 spos = omw.eyePos.xyz + dir * new_dist;
            vec2 fog = fog_at(spos, dist, dir, dyn_clouds, dyn_mist);

            col.rgb = mix(fog_light * fog.y, col.rgb, pow(0.9999, abs(dist - new_dist) * fog.x * 10000));

            // Rayleigh scattering
            col.rgb = mix(col.rgb, sky_color, (1.0 - 1.0 / (1.0 + abs(dist - new_dist) * 0.00001 * scattering_factor)) * clamp((15000 - spos.z) * 0.0001, 0.0, 1.0));

            dist = new_dist;
            f -= 1;
        }

        return col;
    }

    vec3 sun_light(vec3 dir) {
        const float frac = 0.003;
        vec3 sun_dir = normalize(omw.sunPos.xyz);
        vec3 sun = clamp(pow((dot(dir, sun_dir) - (1.0 - frac)) / frac, 10) * 1, 0, 1) * sun_color * 50;
        vec3 sun_glare = pow(max(dot(dir, sun_dir), 0), 10) * sun_color * 0.5;

        return sun + sun_glare;
    }

    float attenuation_strength_real(vec3 rpos) {
        float d2 = rpos.x * rpos.x + rpos.y * rpos.y + rpos.z * rpos.z;
        return 1.0 / (pow(point_glow_min, 2) + pow(d2, point_glow_falloff));
    }

	// Maps a float from an input range to an output range, without clamping
	float map(float value, float min1, float max1, float min2, float max2) {
	  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);
	}

    vec3 apply_point_glow(vec3 wpos, vec3 dir, float max_dist, vec3 color, in float dyn_clouds, in float dyn_mist) {
        for (int i = 0; i < omw_GetPointLightCount(); i ++) {
            vec3 light_pos = omw_GetPointLightWorldPos(i);
            // Project light_pos to dir line
            float t = max(dot(light_pos - wpos, dir), 0);
            vec3 nearest = wpos + dir * min(t, max_dist);

            vec3 difference = light_pos - nearest;
            float distance_2 = dot(difference, difference);

            float spread = 0.6;
            if (point_glow_diffusion && !omw.isInterior) {
                spread /= 1.0 + fog_at(light_pos, min(t, max_dist), dir, dyn_clouds, dyn_mist).x * 200.0;
            }

            float strength = pow(attenuation_strength_real(difference), spread)
                * 0.5
                * point_glow_strength
                * max(1.0 - t * 0.0002, 0.0);

			// Fade out point lights that are too close to the camera
			{
				float d2 = distance(omw.eyePos.xyz, light_pos);
				d2 = map(d2, point_glow_min_fade_dist, point_glow_max_fade_dist, point_glow_fade, 1.0);
				d2 = clamp(d2, point_glow_fade, 1.0);
				strength *= d2;
			}

            if (clamp_point_glow) {
                strength *= max(0.0, 1.0 - distance_2 / pow(omw_GetPointLightRadius(i), 2.0));
            }

            vec3 light_color = omw_GetPointLightDiffuse(i) * 100.0 * strength;

            color += light_color;
        }
        return color;
    }

    vec3 rand(vec2 n) {
        return fract(sin(vec3(1.0, 3.0, 7.0) * dot(n, vec2(12.9898, 4.1414))) * 43758.5453);
    }

    void main() {

        vec4 col = omw_Texture2D(omw_SamplerLastShader, omw_TexCoord);

        vec3 wpos = wpos_at(omw_TexCoord);

        float max_dist = distance(omw.eyePos.xyz, wpos);
        vec3 dir = (wpos - omw.eyePos.xyz) / max_dist;

        // Dynamically adjust clouds with weather
        float dyn_clouds = cloud_density;
        if (dynamic_clouds) {
            //Adjust cloud according to weatherID
            dyn_clouds *= mix(
                cloud_transition[omw.weatherID],
                cloud_transition[omw.nextWeatherID],
                omw.weatherTransition
            ) * 3.0;
            dyn_clouds = clamp(dyn_clouds, 0.0, 1.0);
        }

        // Dynamically adjust mist with weather
        float dyn_mist = 1.0; //Default full mist
        if (dynamic_mist) {
            //Calc mist based on weather state
            float weather_mist = mix(mist_transition[omw.weatherID],mist_transition[omw.nextWeatherID],omw.weatherTransition);
            //Filter for time of day 5-8 = max mist, blending an hour each side.
            float morning_mist = 1-abs(omw.gameHour-clamp(omw.gameHour, 5 , 8));
            //Which ever is greater wins..
            dyn_mist = max(weather_mist, morning_mist);
        }

		if (!omw.isInterior) {
			if (max_dist >= HORIZON * 0.9) {
				if (replace_skybox) {
					// Darken the sky above
					col.rgb = sky_color * mix(vec3(0.5, 0.7, 0.9), vec3(1.0), vec3(1.0 - dir.z));
				}
				if (better_sun) {
					col.rgb += sun_light(dir);
				}
			}
            col = apply_fog(col, wpos, dir, max_dist, dyn_clouds, dyn_mist);
        }

        if (point_glow_strength > 0.0) {
            col.rgb = apply_point_glow(omw.eyePos.xyz, dir, max_dist, col.rgb, dyn_clouds, dyn_mist);
        }

        if (dithering_enabled) {
            col.rgb += rand(omw_TexCoord * 1000.0) * 2.0 / 255.0;
        }

        omw_FragColor = col;
    }
}

technique {
    passes = main;
    version = "0.1";
    description = "Volumetric Clouds";
    author = "zesterer";
    hdr = true;
    flags = disable_underwater, disable_sunglare;
    pass_lights = true;
}
