uniform_float quality {
    default = 2.5;
    min = 0.0;
    max = 10.0;
    step = 0.5;
    description = "Quality of clouds";
}

uniform_float cloud_density {
    default = 0.5;
    min = 0.0;
    max = 1.0;
    step = 0.05;
    description = "Density of clouds";
}

uniform_float cloud_height {
    default = 250000;
    min = 2500;
    max = 500000;
    step = 1000;
    description = "Height of clouds above the water level";
}

uniform_float mist_density {
    default = 0.5;
    min = 0.0;
    max = 1.0;
    step = 0.05;
    description = "Density of mist";
}

uniform_bool swirling {
    default = false;
    description = "An additional swirling effect for mist";
}

uniform_bool clouds {
    default = true;
    description = "Whether clouds are enabled or not";
}

uniform_bool replace_skybox {
    default = true;
    description = "Whether the default skybox is replaced";
}

sampler_2d noise {
    source = "textures/noise.png";
    mag_filter = linear;
    min_filter = linear;
    wrap_s = repeat;
    wrap_t = repeat;
}

fragment main {

    omw_In vec2 omw_TexCoord;

    uniform sampler2D omw_SamplerLastShader;
    uniform sampler2D omw_SamplerDepth;

    #define HORIZON 10000000

    float dist_at(vec2 uv) {
        float depth = omw_GetDepth(omw_SamplerDepth, uv);
        mat4 inv = omw.invViewMatrix * omw.invProjectionMatrix;
        vec4 clip_space = vec4((uv * 2.0 - 1.0) * vec2(1, 1), 1 - depth, 1.0);
        vec4 view_space = inv * clip_space;
        return view_space.z / view_space.w;
    }

    vec3 wpos_at(vec2 uv) {
        float depth = omw_GetDepth(omw_SamplerDepth, uv);
        vec4 clip_space = vec4(uv * 2.0 - 1.0, 1 - depth, 1.0);
        if (depth == 1) {
            vec4 world_space = omw.invViewMatrix * ((omw.invProjectionMatrix * clip_space) * vec4(1, 1, 1, 0));
            return normalize(world_space.xyz) * HORIZON;
        } else {
            vec4 world_space = omw.invViewMatrix * (omw.invProjectionMatrix * clip_space);
            return world_space.xyz / world_space.w;
        }
    }

    #define M1 2047667443U
    #define M2 3883706873U
    #define M3 3961281721U

    float hash_one(uint q) {
        uint n = ((M3 * q) ^ M2) * M1;
        return float(n) * (1.0 / float(0xffffffffU));
    }

    float noise_2d(vec2 pos) {
        return omw_Texture2D(noise, pos).x;
    }

    float noise_3d(vec3 pos) {
        pos.z *= 15.0;
        uint z = uint(trunc(pos.z));
        vec2 offs0 = vec2(hash_one(z), hash_one(z + 73u));
        vec2 offs1 = vec2(hash_one(z + 1u), hash_one(z + 1u + 73u));
        return mix(
            noise_2d(pos.xy + offs0),
            noise_2d(pos.xy + offs1),
            fract(pos.z)
        );
    }

    vec2 fog_at(vec3 wpos, float dist) {
        wpos.z = max(wpos.z, 0);
        if (swirling) {
            wpos.xy += vec2(
                noise_2d(wpos.xy * 0.0005) - 0.5,
                noise_2d(wpos.xy * 0.0005) - 0.5
            ) * 250;
        }
        vec3 time = vec3(omw.simulationTime * 0.1, 0, 0);
        float mist_nz = mist_density * (0.01
            * ((noise_3d((wpos - time * 2000) / 3000) - 0.5) * 0.5 + 0.5) * 0.8
            * (0.5 - abs(noise_3d((wpos + time * 3000) / 2000) - 0.5) * 0.5) * 0.4
        );
        float mist_base = omw.waterHeight + (noise_2d(wpos.xy * 0.00001 + time.xy * 0.03) - 0.6) * 8000;
        float mist_height = 5000;

        float mist = max(mist_nz, 0.0) * pow(clamp(1.0 - (wpos.z - mist_base) / mist_height, 0, 1), 5);

        float cloud_base = 0.0;
        float cloud = 0.0;
        float sun_access = 1.0;
        if (clouds) {
            cloud_base = omw.waterHeight + cloud_height
                + (noise_2d(wpos.xy * 0.0000003 + time.xy * 0.03) - 0.5) * 300000
                + (noise_2d(wpos.xy * 0.000001 + time.xy * 0.03) - 0.5) * 100000;
            float cloud_nz = cloud_density * (0.4 + 1
                * ((noise_2d((wpos.xy - time.xy * 100000.0) / 4000000) - 0.5) * 5 + 0.5)
                * ((noise_3d((wpos + time * 50000.0) / 800000) - 0.5) * 1.5 + 0.5)
                * ((noise_3d((wpos - time * 50000.0) / 100000) - 0.5) * 0.3 + 0.5)
            );
            cloud = pow(max(cloud_nz, 0), 3) * 0.001 * pow(max(1.0 - abs(wpos.z - cloud_base) / 400000, 0), 8);
            sun_access *= 1 - min(cloud * 1500000, 1) * clamp((cloud_base - wpos.z) * 0.0000035
                + (noise_2d(wpos.xy / 500000 - time.xy * 0.2) - 0.5) * 0.1
                + (noise_3d(wpos / 200000 - time * 0.2) - 0.5) * 0.1
                , -0.5, 0.9);
        }

        float attenuation = 0.00009 / (1.0 + wpos.z / 300);

        return vec2(
            mist + cloud + attenuation,
            sun_access
        );
    }

    vec3 sun_color = mix(
        vec3(2, 0.3, 0) * 3,
        vec3(0.6, 0.5, 0.0),
        pow(max(omw.sunPos.z, 0), 0.1)
    );

    vec3 sky_color = mix(
        mix(
            vec3(1.2, 0.4, 0.2),
            vec3(0.01, 0.05, 0.15),
            pow(max(-omw.sunPos.z, 0), 0.2)
        ),
        vec3(0.6, 0.8, 1),
        pow(max(omw.sunPos.z, 0), 0.5)
    );

    vec4 apply_fog(vec4 col, vec3 wpos, vec3 dir, float max_dist) {
        float sun_light = pow(max(omw.sunPos.z, 0), 0.25);
        float moon_light = max(-omw.sunPos.z + 0.5, 0.0) * 0.3;
        float direct_light = pow(max(dot(dir, normalize(omw.sunPos.xyz)), 0), 20) * pow(max(omw.sunPos.z, 0), 0.2) * 0.3;
        vec3 fog_color = (sun_light + moon_light) * mix(sky_color, vec3(1), 0.35);

        float step_factor = 1.0 / mix(0.75, 1, quality);

        float dist = max_dist;
        float f = (log(dist) / step_factor) + 1;
        dist -= max_dist * 0.1; // Hack, makes mist appear at distance
        float total_fog = 0;
        int i = 0;
        while (f > 1 && i++ < 100) {
            float new_dist = min(exp(f * step_factor), max_dist);

            vec3 spos = omw.eyePos.xyz + dir * mix(new_dist, dist, 0.5);
            vec2 fog = fog_at(spos, new_dist);

            vec3 fog_col = fog_color + direct_light * sun_color;
            col.rgb = mix(fog_col * fog.y, col.rgb, pow(0.9999, abs(dist - new_dist) * fog.x * 10000));

            total_fog += fog.y;
            dist = new_dist;
            f -= 1;
        }

        return col;
    }

    vec3 sun_light(vec3 dir) {
        const float frac = 0.002;
        vec3 sun_dir = normalize(omw.sunPos.xyz);
        vec3 sun = clamp(pow((dot(dir, sun_dir) - (1.0 - frac)) / frac, 10) * 1, 0, 1) * sun_color * 5;
        vec3 sun_glare = pow(max(dot(dir, sun_dir), 0), 8) * sun_color * 3.0;

        return sun + sun_glare;
    }

    void main() {
        vec4 col = omw_Texture2D(omw_SamplerLastShader, omw_TexCoord);

        vec3 wpos = wpos_at(omw_TexCoord);
        float max_dist = distance(omw.eyePos.xyz, wpos);
        vec3 dir = (wpos - omw.eyePos.xyz) / max_dist;

        if (max_dist >= HORIZON * 0.9) {
            if (replace_skybox) {
                col.rgb = sky_color;
            }
            col.rgb += sun_light(dir);
        }

        col = apply_fog(col, wpos, dir, max_dist);

        omw_FragColor = col;
    }
}

technique {
    passes = main;
    version = "0.1";
    description = "Volumetric Clouds";
    author = "zesterer";
    version = "1.0";
    flags = disable_interiors, disable_underwater, disable_sunglare;
}
