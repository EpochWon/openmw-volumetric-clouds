uniform_float quality {
    default = 5.0;
    min = 1.0;
    max = 10.0;
    step = 0.1;
    description = "Quality of clouds";
}

sampler_2d noise {
    source = "textures/noise.png";
    mag_filter = linear;
    min_filter = linear;
    wrap_s = repeat;
    wrap_t = repeat;
}

fragment main {

    omw_In vec2 omw_TexCoord;

    uniform sampler2D omw_SamplerLastShader;
    uniform sampler2D omw_SamplerDepth;

    #define HORIZON 500000.0

    float dist_at(vec2 uv) {
        float depth = omw_GetDepth(omw_SamplerDepth, uv);
        #ifdef OMW_REVERSE_Z
            depth = 1 - depth;
        #endif

        mat4 inv = omw.invViewMatrix * omw.invProjectionMatrix;

        vec4 clip_space = vec4((uv * 2.0 - 1.0) * vec2(1, 1), depth, 1.0);
        vec4 view_space = inv * clip_space;
        return view_space.z / view_space.w;
    }

    vec3 wpos_at(vec2 uv) {
        float depth = omw_GetDepth(omw_SamplerDepth, uv);
        #ifdef OMW_REVERSE_Z
            depth = 1 - depth;
        #endif

        mat4 inv = omw.invViewMatrix * omw.invProjectionMatrix;

        vec4 clip_space = vec4((uv * 2.0 - 1.0) * vec2(1, 1), depth, 1.0);
        vec4 view_space = inv * clip_space;
        return view_space.xyz / view_space.w;
    }

    #define M1 2047667443U
    #define M2 3883706873U
    #define M3 3961281721U

    float hash_one(uint q) {
        uint n = ((M3 * q) ^ M2) * M1;
        return float(n) * (1.0 / float(0xffffffffU));
    }

    float noise_2d(vec2 pos) {
        return omw_Texture2D(noise, pos).x;
    }

    float noise_3d(vec3 pos) {
        pos.z *= 15.0;
        uint z = uint(trunc(pos.z));
        vec2 offs0 = vec2(hash_one(z), hash_one(z + 73u));
        vec2 offs1 = vec2(hash_one(z + 1u), hash_one(z + 1u + 73u));
        return mix(
            noise_2d(pos.xy + offs0),
            noise_2d(pos.xy + offs1),
            fract(pos.z)
        );
    }

    float fog_at(vec3 wpos, float dist) {
        /*
        wpos.xy += vec2(
            noise_2d(wpos.xy * 0.0001),
            noise_2d(wpos.xy * 0.0001)
        ) * 500;
        */
        vec3 time = vec3(omw.simulationTime * 0.1, 0, 0);
        float cloud = 1.0
            * max(noise_3d(wpos / 300000 + time * 0.03) * 1.6 - 0.35, 0) * 0.2
            * noise_3d(wpos / 3000 - time * 0.3) * 0.2
            * mix(
                1.0,
                ((noise_3d(wpos / 1000 + time * 3) - 0.5) * 1.0 + 0.5) * 0.8,
                1.0 / (1.0 + dist * 0.00003)
            )
        ;
        float fog_height = 3000 + noise_2d(wpos.xy * 0.00001) * 2000;
        return max(cloud, 0) * pow(clamp(1.0 - (wpos.z - omw.waterHeight) / fog_height, 0, 1), 5);
    }

    vec4 apply_fog(vec4 col, vec3 wpos, vec3 dir, float max_dist) {
        float fog = 0.0;
        float dist = 1.0;
        int i = 0;
        while (dist < max_dist && i < 100) {
            float new_dist = min(dist * (1.0 + 1.0 / quality), max_dist);

            fog += fog_at(omw.eyePos.xyz + dir * dist, new_dist) * (new_dist - dist);

            dist = new_dist;
            i += 1;
        }

        float fog_factor = 1.0 - 1.0 / (fog + 1.0);
        vec3 fog_color = (vec3(omw.sunVis) + pow(max(dot(dir, omw.sunPos.xyz), 0), 4) + 0.3) * 0.75 * omw.fogColor.rgb;

        return mix(col, vec4(fog_color, 1), fog_factor);
    }

    void main()
    {
        vec4 col = omw_Texture2D(omw_SamplerLastShader, omw_TexCoord);
        float depth = omw_GetDepth(omw_SamplerDepth, omw_TexCoord);

        mat4 inv_depth = omw.invProjectionMatrix;

        vec3 wpos = wpos_at(omw_TexCoord);
        vec3 dir = normalize(wpos - omw.eyePos.xyz);

        float max_dist = distance(omw.eyePos.xyz, wpos);
        max_dist = dir.z < 0 ? min(max_dist, (omw.eyePos.z - omw.waterHeight) / -dir.z) : max_dist;
        col = apply_fog(col, wpos, dir, max_dist);

        omw_FragColor = col;
    }
}

technique {
    passes = main;
    description = "Volumetric Clouds";
    author = "zesterer";
    version = "1.0";
    flags = disable_interiors, disable_underwater, disable_sunglare;
}
